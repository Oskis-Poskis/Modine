#version 430

layout(local_size_x = 8, local_size_y = 8) in;
layout(rgba32f, binding = 2) uniform image2D img_output;

layout(binding = 0) uniform sampler2D renderTexture;
layout(binding = 1) uniform usampler2D stencilTexture;

uniform int numSteps = 12;
uniform float radius = 3.0;
uniform bool debug;

const float TAU = 6.28318530;

void main()
{
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 screen_size = imageSize(img_output);
    vec2 UVs = (vec2(pixel_coords + 0.00001)) / vec2(screen_size); // Add float to pixel_coords for float division, not int
    
    vec4 color = vec4(texture(renderTexture, UVs).rgb, 1.0);
    uint stencil = texture(stencilTexture, UVs).r;
    
    vec2 aspect = 1.0 / vec2(textureSize(stencilTexture, 0));
    float outlinemask = 0.0;
    for (float i = 0.0; i < TAU; i += TAU / numSteps)
    {
        vec2 offset = vec2(sin(i), cos(i)) * aspect * radius;
        float col = texture(stencilTexture, UVs + offset).r;
        
        outlinemask = mix(outlinemask, 1.0, col);
    }
    outlinemask = mix(outlinemask, 0.0, stencil);

    vec4 final = mix(color, vec4(0.85, 0.4, 0.0, 1.0), clamp(outlinemask, 0.0, 1.0));
    if (!debug) imageStore(img_output, pixel_coords, final);
    else imageStore(img_output, pixel_coords, vec4(vec3(outlinemask), 1.0));
}