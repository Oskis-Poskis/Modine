#version 430

layout(local_size_x = 8, local_size_y = 8) in;
layout(rgba32f, binding = 1) uniform image2D img_output;

layout(binding = 0) uniform sampler2D renderTexture;

uniform float ChromaticAbberationRadius = 1;
uniform float ChromaticAbberationStrength = 5 / 100;

float dist(vec2 p0, vec2 pf)
{
    return sqrt((pf.x-p0.x)*(pf.x-p0.x)+(pf.y-p0.y)*(pf.y-p0.y));
}

void main()
{
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 screen_size = imageSize(img_output);
    float aspect_ratio = screen_size.x / screen_size.y;

    vec2 uv = (vec2(pixel_coords) + 0.5) / vec2(screen_size); // Add 0.5 to center the texel
    vec3 color = texture(renderTexture, uv).rgb;

    float rValue = texture(renderTexture, uv + vec2(ChromaticAbberationStrength / 100, 0)).r;
    float gValue = texture(renderTexture, uv).g;
    float bValue = texture(renderTexture, uv - vec2(ChromaticAbberationStrength / 100, 0)).b;

    vec3 pp = vec3(rValue, gValue, bValue);

    float distance = length(((uv - vec2(0.5))) * vec2(aspect_ratio, 1.0));
    float CAalpha = clamp(1.0 - distance / ChromaticAbberationRadius, 0.0, 1.0);

    vec3 result = mix(pp, color, CAalpha);

    imageStore(img_output, pixel_coords, vec4(result, 1.0));
}
